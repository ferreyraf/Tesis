/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "LCD_I2C.h"
//#include "LCD_I2C.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
uint8_t page=0;
uint8_t nivel=1;

char page_visualizacion[20];
char page_copy_visualizacion[20];
uint32_t tiempo_actual=0;
uint32_t tiempo_pasado=0;

typedef struct Menu {
    uint8_t pagina;
    struct Menu *anterior;
} Menu;

Menu menu_principal={0,NULL};

Menu calibracion={10,&menu_principal};
Menu recepcion_de_archivo={20,&menu_principal};
Menu pesaje_normal={30,&menu_principal};
Menu pesaje_archivo={40,&menu_principal};

Menu calibrar_cero={11,&calibracion};
Menu calibrar_patron={12,&calibracion};
Menu setear_patron={13,&calibracion};

Menu recepcion={21,&recepcion_de_archivo};

Menu mostrar_archivo={41,&pesaje_archivo};
Menu pesar_archivo={42,&pesaje_archivo};



Menu *menu_actual=&menu_principal;//inicializa con menu principal



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void imprimir_pantalla(uint8_t page,uint8_t nivel);
Menu* buscar_menu(uint8_t page,uint8_t nivel);
//Menu* createNode(uint8_t pag, int num_children);

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  LCD_I2C_Init();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  imprimir_pantalla(page, nivel);
	  HAL_Delay(400);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pins : Switch_Up_Pin Switch_Down_Pin Switch_OK_Pin Switch_Back_Pin */
  GPIO_InitStruct.Pin = Switch_Up_Pin|Switch_Down_Pin|Switch_OK_Pin|Switch_Back_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */

void imprimir_pantalla(uint8_t page,uint8_t nivel){


	//---------------PAGE 0----------------------------
	if((page==0)&&(nivel==1))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"->Calibracion");
		LCD_I2C_WriteText(2,1,"Recepcion de Archivo");
		LCD_I2C_WriteText(3,1,"Pesaje Normal");
		LCD_I2C_WriteText(4,1,"Pesaje de Archivo");

	}
	if((page==0)&&(nivel==2))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Calibracion");
		LCD_I2C_WriteText(2,1,"->Recepcion de Archivo");
		LCD_I2C_WriteText(3,1,"Pesaje Normal");
		LCD_I2C_WriteText(4,1,"Pesaje de Archivo");
	}
	if((page==0)&&(nivel==3))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Calibracion");
		LCD_I2C_WriteText(2,1,"Recepcion de Archivo");
		LCD_I2C_WriteText(3,1,"->Pesaje Normal");
		LCD_I2C_WriteText(4,1,"Pesaje de Archivo");
	}
	if((page==0)&&(nivel==4))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Calibracion");
		LCD_I2C_WriteText(2,1,"Recepcion de Archivo");
		LCD_I2C_WriteText(3,1,"Pesaje Normal");
		LCD_I2C_WriteText(4,1,"->Pesaje de Archivo");
	}

	//---------------PAGE 10----------------------------
	if((page==10)&&(nivel==1))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"----Calibracion-----");
		LCD_I2C_WriteText(2,1,"->Calibrar Cero");
		LCD_I2C_WriteText(3,1,"Calibrar con Patron");
		LCD_I2C_WriteText(4,1,"Setear Patron");

	}
	if((page==10)&&(nivel==2))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"----Calibracion-----");
		LCD_I2C_WriteText(2,1,"Calibrar Cero");
		LCD_I2C_WriteText(3,1,"->Calibrar con Patron");
		LCD_I2C_WriteText(4,1,"Setear Patron");

	}
	if((page==10)&&(nivel==3))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"----Calibracion-----");
		LCD_I2C_WriteText(2,1,"Calibrar Cero");
		LCD_I2C_WriteText(3,1,"Calibrar con Patron");
		LCD_I2C_WriteText(4,1,"->Setear Patron");

	}
	if((page==10)&&(nivel==4))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"----Calibracion-----");
		LCD_I2C_WriteText(2,1,"Calibrar Cero");
		LCD_I2C_WriteText(3,1,"Calibrar con Patron");
		LCD_I2C_WriteText(4,1,"Setear Patron");

	}


	//---------------PAGE 11----------------------------
	if((page==11))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Calibrar Cero");
		LCD_I2C_WriteText(2,1,"");
		LCD_I2C_WriteText(3,1,"cero");
		LCD_I2C_WriteText(4,1,"");

	}

	//---------------PAGE 12----------------------------
	if((page==12))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Calibrar con Patron");
		LCD_I2C_WriteText(2,1,"");
		LCD_I2C_WriteText(3,1,"Patron");
		LCD_I2C_WriteText(4,1,"");

	}
	//---------------PAGE 13----------------------------
	if((page==13))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Setear Patron");
		LCD_I2C_WriteText(2,1,"");
		LCD_I2C_WriteText(3,1," set --Patron");
		LCD_I2C_WriteText(4,1,"");

	}
	//---------------PAGE 20----------------------------
	if((page==20)&&(nivel==1))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"Recepcion de Archivo");
		LCD_I2C_WriteText(2,1,"->Recepcion");
		LCD_I2C_WriteText(3,1,"");
		LCD_I2C_WriteText(4,1,"");

	}
	//---------------PAGE 21----------------------------
	if(page==21)
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"---Recepcion---");
		LCD_I2C_WriteText(2,1,"");
		LCD_I2C_WriteText(3,1,"Producto: NF4");
		LCD_I2C_WriteText(4,1,"Bachas: 3");

	}
	//---------------PAGE 30----------------------------
	if(page==30)
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"--Pesaje Normal--");
		LCD_I2C_WriteText(2,1,"");
		LCD_I2C_WriteText(3,1,"     125.3 Kg");
		LCD_I2C_WriteText(4,1,"");

	}

	//---------------PAGE 40----------------------------
	if((page==40)&&(nivel==1))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"--Pesaje Archivo--");
		LCD_I2C_WriteText(2,1,"->Mostrar Archivo");
		LCD_I2C_WriteText(3,1,"Pesar Archivo");
		LCD_I2C_WriteText(4,1,"");

	}
	//---------------PAGE 40----------------------------
	if((page==40)&&(nivel==2))
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"--Pesaje Archivo--");
		LCD_I2C_WriteText(2,1,"Mostrar Archivo");
		LCD_I2C_WriteText(3,1,"->Pesar Archivo");
		LCD_I2C_WriteText(4,1,"");

	}
	//---------------PAGE 40----------------------------
	if(page==40)
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"--Pesaje Archivo--");
		LCD_I2C_WriteText(2,1,"Mostrar Archivo");
		LCD_I2C_WriteText(3,1,"Pesar Archivo");
		LCD_I2C_WriteText(4,1,"");

	}
	//---------------PAGE 41----------------------------
	if(page==41)
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"--Mostrar Archivo--");
		LCD_I2C_WriteText(2,1,"Nf4 3 bachas ");
		LCD_I2C_WriteText(3,1," arroz: 20kg");
		LCD_I2C_WriteText(4,1," azucar: 35 kg");

	}
	//---------------PAGE 42----------------------------
	if(page==42)
	{
		LCD_I2C_ClearText();
		LCD_I2C_WriteText(1,1,"--Pesar Archivo--");
		LCD_I2C_WriteText(2,1,"NF4");
		LCD_I2C_WriteText(3,1," ARROZ:    0.0KG");
		LCD_I2C_WriteText(4,1,"");

	}

}

Menu* buscar_menu(uint8_t page,uint8_t nivel)
{


	//---------------PAGE 0----------------------------
		if((page==0)&&(nivel==1))
		{
			return &calibracion;
		}
		if((page==0)&&(nivel==2))
		{
			return &recepcion;
		}
		if((page==0)&&(nivel==3))
		{
			return &pesaje_normal;
		}
		if((page==0)&&(nivel==4))
		{
			return &pesaje_archivo;
		}

			//---------------PAGE 10----------------------------
		if((page==10)&&(nivel==1))
		{
			return &calibrar_cero;
		}
		if((page==10)&&(nivel==2))
		{
			return &calibrar_patron;
		}
		if((page==10)&&(nivel==3))
		{
			return &setear_patron;

		}
		if((page==10)&&(nivel==4))
		{
			return menu_actual;//NO existe devulve donde estaba
		}

		//---------------PAGE 20----------------------------
		if((page==20)&&(nivel==1))
		{
			return &recepcion;
		}
		if((page==20))
		{
			return menu_actual;
		}

		//---------------PAGE 30----------------------------
		if((page==30))
		{
			return menu_actual;
		}

		//---------------PAGE 40----------------------------
		if((page==40)&&(nivel==1))
		{
			return &mostrar_archivo;
		}
		if((page==40)&&(nivel==2))
		{
			return &pesar_archivo;
		}
		if((page==40))
		{
			return menu_actual;
		}

		//---------------PAGE 11----------------------------
		if((page==11))
		{
			return menu_actual;
		}

		//---------------PAGE 12----------------------------
		if((page==12))
		{
			return menu_actual;
		}

		//---------------PAGE 13----------------------------
		if((page==13))
		{
			return menu_actual;
		}

		//---------------PAGE 41----------------------------
		if((page==41))
		{
			return menu_actual;
		}

		//---------------PAGE 42----------------------------
		if((page==42))
		{
			return menu_actual;
		}



		return NULL;



}
/*
Menu* createNode(uint8_t pag, int num_children) {
    Menu* newNode = (Menu*)malloc(sizeof(Menu));
    newNode->pagina = pag;
    newNode->num_hijo = num_children;
    newNode->hijos = (Menu**)malloc(num_children * sizeof(Menu*));
    for (int i = 0; i < num_children; i++) {
        newNode->hijos[i] = NULL;
    }
    newNode->prev = NULL;
    return newNode;
}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==Switch_OK_Pin)
	  {

		tiempo_actual=HAL_GetTick();
		if((tiempo_actual-tiempo_pasado)>180)//con 180 el antirrebote funciona bien
		{
			tiempo_pasado=tiempo_actual;
			//PROCESO
			menu_actual=buscar_menu(page,nivel);//Retorna el menu donde salta
			page=menu_actual->pagina;

		}
	  }
	if(GPIO_Pin==Switch_Back_Pin)
		  {

			tiempo_actual=HAL_GetTick();
			if((tiempo_actual-tiempo_pasado)>180)//con 180 el antirrebote funciona bien
			{
				tiempo_pasado=tiempo_actual;
				//PROCESO
				menu_actual=menu_actual->anterior;
				page=menu_actual->pagina;

			}
		  }

	if(GPIO_Pin==Switch_Up_Pin)
			  {

				tiempo_actual=HAL_GetTick();
				if((tiempo_actual-tiempo_pasado)>180)//con 180 el antirrebote funciona bien
				{
					tiempo_pasado=tiempo_actual;
					//PROCESO
					nivel--;
					if(nivel<1)
						{
							nivel=4;
						}
				}
			  }

	if(GPIO_Pin==Switch_Down_Pin)
				  {

					tiempo_actual=HAL_GetTick();
					if((tiempo_actual-tiempo_pasado)>180)//con 180 el antirrebote funciona bien
					{
						tiempo_pasado=tiempo_actual;
						//PROCESO
						nivel++;
						if(nivel>4)
							{
								nivel=1;
							}
					}
				  }


}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
